-------------------------------------------------
-- File:	Multiplier_8.vhd
-- Entity: Multiplier_8
-- Architecture:	Behavioral 
-- Author: John Judge
-- Created: 3/3/16
-- Modified: 3/10/16
-- VHDL'93
-- Description: The following is an 8 but multiplier
-------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Multiplier_8 is
--Correct in and outs
	Port (	DATAIN1, DATAIN2 : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
						DATAOUT : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)) ;
end Multiplier_8;

architecture Structural of Multiplier_8 is
--The 16 bit adder is made of 16 different fulladders
	Component fulladder
		Port(X,Y,Ci:	IN		STD_LOGIC;
				Co,Sum:	OUT	STD_LOGIC);
	end component;
	Signal C0,C1,C2,C3,C4,C5,C6,C7: STD_LOGIC_VECTOR(7 downto 0);--Carry signals for each line of FAs
	--Array for out of FA
	type OutOfFAs is array (6 downto 0) of std_logic_vector(7 downto 0); 
	signal OutOfFA : OutOfFAs;   --OutOfFA is a 7 element array of 8-bit vectors.
	--Array for out of ANDS
	type OutOfANDSs is array (7 downto 0) of std_logic_vector(7 downto 0); 
	signal OutOfAND : OutOfANDSs;   --OutOfAND is a 8 element array of 8-bit vectors.
	--Signals for Arrays
	signal TempANDs0,TempANDs1,TempANDs2,TempANDs3,TempANDs4,TempANDs5,TempANDs6,TempANDs7: STD_LOGIC_VECTOR(7 downto 0);--Each line of ANDS
	signal ZeroSignal: STD_LOGIC;--For FA that gets input of 0 (used to be IntoFA8)
	signal DATAOUTtemp: STD_LOGIC_VECTOR(15 downto 0);
	
begin
	

	L1: for i in 0 to 7 generate
		L2: for j in 0 to 7 generate 
				OutOfAND(i)(j) <= DATAIN1(i) AND DATAIN2(j);
		end generate L1;
	end generate L2;
	--Generate Structure
	
	FABEGINLINE0: fulladder PORT MAP(OutOfAND(0)(1),OutOfAND(1)(0),ZeroSignal,C0(0),OutofFA(0)(0));
	FALINE0: for i in 1 to 6 generate --1 less than line since last FA gets 0 as input
		FA: fulladder PORT MAP(OutOfAND(0)(i+1),OutOfAND(1)(i),OutOfAND(2)(i-1),C0(i),OutofFA(0)(i));--Loop to generate FAs
	end generate FALINE0;
	FAENDLINE0: fulladder PORT MAP(ZeroSignal,OutOfAND(1)(7),OutOfAND(2)(6),C0(7),OutofFA(0)(7));--Need this because input of last is 0
	
	FABEGINLINE1: fulladder PORT MAP(OutofFA(0)(1),ZeroSignal,C0(0),C1(0),OutofFA(1)(0));
	FALINE1: for i in 1 to 6 generate --1 less than line since last FA gets cout of last FA on previous line as input
		FA: fulladder PORT MAP(OutOfFA(0)(i+1),OutOfAND(3)(i-1),C0(i),C1(i),OutofFA(1)(i));--Loop to generate FAs
	end generate FALINE1;
	FAENDLINE1: fulladder PORT MAP(OutOfAND(2)(7),OutOfAND(3)(6),C0(7),C1(7),OutofFA(1)(7));--Need this because input of last is Out of FA7 on previous line
	
	FABEGINLINE2: fulladder PORT MAP(OutofFA(1)(1),ZeroSignal,C1(0),C2(0),OutofFA(2)(0));
	FALINE2: for i in 1 to 6 generate --1 less than line since last FA gets 0 as input
		FA: fulladder PORT MAP(OutOfFA(1)(i+1),OutOfAND(4)(i-1),C1(i),C2(i),OutofFA(2)(i));--Loop to generate FAs
	end generate FALINE2;
	FAENDLINE2: fulladder PORT MAP(OutOfAND(3)(7),OutOfAND(4)(6),C1(7),C2(7),OutofFA(2)(7));--Need this because input of last is Out of FA7 on previous line
	
	FABEGINLINE3: fulladder PORT MAP(OutofFA(2)(1),ZeroSignal,C2(0),C3(0),OutofFA(3)(0));
	FALINE3: for i in 1 to 6 generate --1 less than line since last FA gets 0 as input
		FA: fulladder PORT MAP(OutOfFA(2)(i+1),OutOfAND(5)(i-1),C2(i),C3(i),OutofFA(3)(i));--Loop to generate FAs
	end generate FALINE3;
	FAENDLINE3: fulladder PORT MAP(OutOfAND(5)(6),OutOfAND(4)(7),C2(7),C3(7),OutofFA(3)(7));--Need this because input of last is Out of FA7 on previous line
	
	FABEGINLINE4: fulladder PORT MAP(OutofFA(3)(1),ZeroSignal,C3(0),C4(0),OutofFA(4)(0));
	FALINE4: for i in 1 to 6 generate --1 less than line since last FA gets 0 as input
		FA: fulladder PORT MAP(OutOfFA(3)(i+1),OutOfAND(6)(i-1),C3(i),C4(i),OutofFA(4)(i));--Loop to generate FAs
	end generate FALINE4;
	FAENDLINE4: fulladder PORT MAP(OutOfAND(6)(6),OutOfAND(5)(7),C3(7),C4(7),OutofFA(4)(7));--Need this because input of last is Out of FA7 on previous line
	
	FABEGINLINE5: fulladder PORT MAP(OutofFA(4)(1),ZeroSignal,C4(0),C5(0),OutofFA(5)(0));
	FALINE5: for i in 1 to 6 generate --1 less than line since last FA gets 0 as input
		FA: fulladder PORT MAP(OutOfFA(4)(i+1),OutOfAND(7)(i-1),C4(i),C5(i),OutofFA(5)(i));--Loop to generate FAs
	end generate FALINE5;
	FAENDLINE5: fulladder PORT MAP(OutOfAND(6)(7),OutOfAND(7)(6),C4(7),C6(7),OutofFA(5)(7));--Need this because input of last is Out of FA7 on previous line
	
	FABEGINLINE6: fulladder PORT MAP(OutofFA(5)(1),ZeroSignal,C5(0),C6(0),OutofFA(6)(0));
	FALINE6: for i in 1 to 6 generate --1 less than line since last FA gets 0 as input
		FA: fulladder PORT MAP(OutOfFA(5)(i+1),C5(i),C6(i-1),C6(i),OutofFA(6)(i));--Loop to generate FAs
	end generate FALINE6;
	FAENDLINE6: fulladder PORT MAP(OutOfAND(6)(7),C5(7),C6(7),OutofFA(6)(7));--Need this because input of last is Out of FA7 on previous line
	DATAOUTtemp <= (C6(7) & OutOfFA(6)(7) & OutOfFA(6)(6) & OutOfFA(6)(5) & OutOfFA(6)(4) & OutOfFA(6)(3) & OutOfFA(6)(2) & OutOfFA(6)(1) & OutOfFA(6)(0) & OutOfFA(5)(0) & OutOfFA(4)(0) & OutOfFA(3)(0) & OutOfFA(2)(0) & OutOfFA(1)(0) & OutOfFA(0)(0) & OutOfAND(0)(0));
	DATAOUT <= DATAOUTtemp;
	
end Structural;

